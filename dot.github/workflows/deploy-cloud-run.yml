# GitHub Actions Workflow for Google Cloud Run Deployment
# Triggers on push to main branch and manual dispatch

name: Deploy to Google Cloud Run

on:
  push:
    branches: [main]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/deploy-cloud-run.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging
      region:
        description: 'Google Cloud region'
        required: true
        default: 'us-central1'
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: ${{ github.event.inputs.region || 'us-central1' }}
  SERVICE_NAME: markdown-editor
  REGISTRY: us-central1-docker.pkg.dev

jobs:
  # Build and test the application
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint

    - name: Run tests
      run: npm run test

    - name: Build application
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 1

    # Set up Google Cloud SDK
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Configure Docker authentication
      run: gcloud auth configure-docker ${{ env.REGISTRY }}

    # Build and push Docker image
    - name: Build and push Docker image
      id: build
      run: |
        IMAGE_NAME="${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/markdown-editor/app"
        IMAGE_TAG="sha-$(echo $GITHUB_SHA | cut -c1-7)"
        FULL_IMAGE_NAME="${IMAGE_NAME}:${IMAGE_TAG}"
        LATEST_IMAGE_NAME="${IMAGE_NAME}:latest"
        
        # Build image
        docker build -t "$FULL_IMAGE_NAME" -t "$LATEST_IMAGE_NAME" .
        
        # Push images
        docker push "$FULL_IMAGE_NAME"
        docker push "$LATEST_IMAGE_NAME"
        
        # Output image information
        echo "image=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT
        echo "digest=$(docker inspect --format='{{index .RepoDigests 0}}' $FULL_IMAGE_NAME)" >> $GITHUB_OUTPUT

  # Deploy to Google Cloud Run
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Deploy to Cloud Run
      id: deploy
      run: |
        # Deploy the service
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image="${{ needs.build-and-test.outputs.image-url }}" \
          --platform=managed \
          --region=${{ env.REGION }} \
          --allow-unauthenticated \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10 \
          --concurrency=100 \
          --timeout=300 \
          --service-account="${{ env.SERVICE_NAME }}-sa@${{ env.PROJECT_ID }}.iam.gserviceaccount.com" \
          --set-env-vars="NODE_ENV=production,TZ=UTC,DEPLOYMENT_SHA=$GITHUB_SHA" \
          --labels="app=markdown-editor,environment=${{ github.event.inputs.environment || 'production' }},deployed-by=github-actions" \
          --execution-environment=gen2 \
          --quiet

        # Get service URL
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format="value(status.url)")
        
        echo "service-url=$SERVICE_URL" >> $GITHUB_OUTPUT

    - name: Configure custom domain
      if: ${{ secrets.CUSTOM_DOMAIN }}
      run: |
        # Check if domain mapping exists
        if ! gcloud run domain-mappings describe "${{ secrets.CUSTOM_DOMAIN }}" \
          --region=${{ env.REGION }} &> /dev/null; then
          
          echo "Creating domain mapping for ${{ secrets.CUSTOM_DOMAIN }}"
          gcloud run domain-mappings create \
            --service=${{ env.SERVICE_NAME }} \
            --domain=${{ secrets.CUSTOM_DOMAIN }} \
            --region=${{ env.REGION }} \
            --quiet
        else
          echo "Domain mapping already exists for ${{ secrets.CUSTOM_DOMAIN }}"
        fi

    - name: Run health check
      run: |
        SERVICE_URL="${{ steps.deploy.outputs.service-url }}"
        echo "Testing health endpoint: $SERVICE_URL/health"
        
        # Wait for service to be ready
        sleep 30
        
        # Test health endpoint
        HEALTH_STATUS=$(curl -s -o /dev/null -w '%{http_code}' "$SERVICE_URL/health" || echo "000")
        
        if [ "$HEALTH_STATUS" = "200" ]; then
          echo "‚úÖ Health check passed (HTTP $HEALTH_STATUS)"
        else
          echo "‚ùå Health check failed (HTTP $HEALTH_STATUS)"
          exit 1
        fi

    - name: Run smoke tests
      run: |
        SERVICE_URL="${{ steps.deploy.outputs.service-url }}"
        
        # Test main application
        APP_STATUS=$(curl -s -o /dev/null -w '%{http_code}' "$SERVICE_URL" || echo "000")
        if [ "$APP_STATUS" = "200" ]; then
          echo "‚úÖ Application smoke test passed (HTTP $APP_STATUS)"
        else
          echo "‚ùå Application smoke test failed (HTTP $APP_STATUS)"
          exit 1
        fi
        
        # Test static assets
        ASSETS_STATUS=$(curl -s -o /dev/null -w '%{http_code}' "$SERVICE_URL/assets/" || echo "000")
        if [ "$ASSETS_STATUS" = "404" ]; then
          echo "‚úÖ Assets endpoint configured correctly (HTTP $ASSETS_STATUS)"
        else
          echo "‚ö†Ô∏è Unexpected assets response (HTTP $ASSETS_STATUS)"
        fi

    - name: Update deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "üöÄ Deployment successful!"
          echo "Service URL: ${{ steps.deploy.outputs.service-url }}"
          if [ -n "${{ secrets.CUSTOM_DOMAIN }}" ]; then
            echo "Custom Domain: https://${{ secrets.CUSTOM_DOMAIN }}"
          fi
        else
          echo "‚ùå Deployment failed!"
        fi

  # Cleanup old revisions (optional)
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: ${{ github.event.inputs.environment != 'staging' }}
    
    steps:
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2

    - name: Cleanup old revisions
      run: |
        echo "Cleaning up old revisions..."
        
        # Keep only the latest 5 revisions
        REVISIONS=$(gcloud run revisions list \
          --service=${{ env.SERVICE_NAME }} \
          --region=${{ env.REGION }} \
          --format="value(metadata.name)" \
          --sort-by="~metadata.creationTimestamp" \
          --limit=100)
        
        # Skip the first 5 (latest) revisions
        OLD_REVISIONS=$(echo "$REVISIONS" | tail -n +6)
        
        if [ -n "$OLD_REVISIONS" ]; then
          echo "Deleting old revisions:"
          echo "$OLD_REVISIONS"
          
          for revision in $OLD_REVISIONS; do
            gcloud run revisions delete "$revision" \
              --region=${{ env.REGION }} \
              --quiet || true
          done
        else
          echo "No old revisions to clean up"
        fi

    - name: Cleanup old images
      run: |
        echo "Cleaning up old container images..."
        
        # Keep only the latest 10 images
        IMAGES=$(gcloud artifacts docker images list \
          "${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/markdown-editor/app" \
          --format="value(package)" \
          --sort-by="~CREATE_TIME" \
          --limit=100)
        
        # Skip the first 10 (latest) images
        OLD_IMAGES=$(echo "$IMAGES" | tail -n +11)
        
        if [ -n "$OLD_IMAGES" ]; then
          echo "Deleting old images:"
          echo "$OLD_IMAGES"
          
          for image in $OLD_IMAGES; do
            gcloud artifacts docker images delete "$image" --quiet || true
          done
        else
          echo "No old images to clean up"
        fi