# Google Cloud Run Service Configuration
# Infrastructure as Code for Markdown Editor deployment

apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: markdown-editor
  labels:
    app: markdown-editor
    environment: production
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/execution-environment: gen2
spec:
  template:
    metadata:
      labels:
        app: markdown-editor
        version: latest
      annotations:
        # Auto-scaling configuration
        autoscaling.knative.dev/minScale: "0"
        autoscaling.knative.dev/maxScale: "10"
        
        # Resource allocation
        run.googleapis.com/memory: "512Mi"
        run.googleapis.com/cpu: "1"
        
        # Request timeout
        run.googleapis.com/timeout: "300s"
        
        # Concurrency settings
        run.googleapis.com/execution-environment: gen2
        autoscaling.knative.dev/maxConcurrency: "100"
        
        # Network settings
        run.googleapis.com/vpc-access-connector: ""  # Add VPC connector if needed
        run.googleapis.com/vpc-access-egress: "private-ranges-only"
        
        # Security settings
        run.googleapis.com/sandbox: gvisor
        
    spec:
      containerConcurrency: 100
      timeoutSeconds: 300
      serviceAccountName: markdown-editor-sa  # Service account for the app
      
      containers:
      - name: markdown-editor
        image: gcr.io/PROJECT_ID/markdown-editor:latest  # Replace PROJECT_ID
        
        # Container ports
        ports:
        - name: http1
          containerPort: 8080
          protocol: TCP
          
        # Environment variables
        env:
        - name: NODE_ENV
          value: "production"
        - name: TZ
          value: "UTC"
        - name: PORT
          value: "8080"
          
        # Resource limits and requests
        resources:
          requests:
            memory: "256Mi"
            cpu: "0.5"
          limits:
            memory: "512Mi"
            cpu: "1"
            
        # Health checks
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            httpHeaders:
            - name: User-Agent
              value: "GoogleHC/1.0"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
          
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            httpHeaders:
            - name: User-Agent
              value: "GoogleHC/1.0"
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
          
        # Startup probe for slower starts
        startupProbe:
          httpGet:
            path: /health
            port: 8080
            httpHeaders:
            - name: User-Agent
              value: "GoogleHC/1.0"
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30  # Allow up to 5 minutes for startup
          successThreshold: 1
          
        # Security context
        securityContext:
          runAsUser: 1001
          runAsGroup: 1001
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            
  traffic:
  - percent: 100
    latestRevision: true